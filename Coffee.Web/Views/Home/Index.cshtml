@{
    ViewBag.Title = "title";
}


<div id="coffeescale" data-bind="foreach: coffeeScales">
    <div data-bind="if: brewing()">
        @Html.Partial("Brygger")    
    </div>
    <div data-bind="if: preparing()">
        @Html.Partial("Forbereder")
    </div>
    <div data-bind="if: done()">
        @Html.Partial("Klar")
    </div>
    <div data-bind="if: empty()">
        @Html.Partial("Tom")
    </div>
</div>




@section scripts
{
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">
        $(function() {
            function Done() {
                var self = this;
                this.numberOfCups = ko.observable(0);
                this.pouring = ko.observable(true);
                this.init = function(data) {
                    var hasNumberOfCups = data.NumberOfCups != null || data.NumberOfCups != undefined;
                    if (hasNumberOfCups) {
                        self.numberOfCups(Math.abs(data.NumberOfCups));
                    }
                    self.pouring(!hasNumberOfCups);
                };
            }

            function Empty() {
                var self = this;
                this.init = function(data) {

                };
            }
            

            function Brewing() {
                var self = this;
                this.timeLeft = ko.observable("");
                this.brewingDone = ko.observable();
                this.progress = ko.observable("0%");

                this.init = function(data) {
                    self.timeLeft(data.TimeRemaining);
                    self.brewingDone(new Date(data.BrewingDone));

                    var brewingDone = new Date(data.BrewingDone);
                    var startTime = new Date();
                    var totalTime = brewingDone - startTime;

                    var progressBar = function() {
                        setTimeout(function() {
                            self.updateRemaining();
                            var now = new Date();
                            var progress = ((now - startTime) / totalTime) * 100;
                            if (progress <= 100) {
                                self.progress(progress + "%");
                                progressBar();
                            }
                        }, 100);
                    };
                    progressBar();
                };
                this.updateRemaining = function() {
                    var time = new Date(self.brewingDone() - new Date());
                    var seconds = time.getSeconds();
                    if (seconds <= 9) {
                        seconds = "0" + seconds;
                    }
                    self.timeLeft(time.getMinutes() + ":" + seconds);
                };

            }

            function Preparing() {
                var self = this;
                this.init = function(data) {
                };
            }


            function CoffeeScaleViewModel(options, scaleId) {
                var self = this;
                this.scaleId = scaleId;

                (function() {
                    var done = new Done();
                    self.states = {
                        Pouring: done,
                        Full: done,
                        NotFull: done,
                        Brewing: new Brewing(),
                        Preparing: new Preparing(),
                        Empty: new Empty()
                    };
                })();


                this.state = ko.observable("Empty");

                this.brewing = ko.computed(function() {
                    return self.state() === "Brewing";
                });

                this.preparing = ko.computed(function() {
                    return self.state() === "Preparing";
                });

                this.done = ko.computed(function() {
                    return self.state() === "Full" || self.state() === "NotFull" || self.state() === "Pouring";
                });

                this.empty = ko.computed(function() {
                    return self.state() === "Empty";
                });               
            }

            function CoffeeScalesViewModel(options) {
                var self = this;

                this.coffeeScales = ko.observableArray();

                var coffeHubProxy = $.connection.coffeeHub;
                coffeHubProxy.client.coffeeDataTick = function (tick, scaleId) {
                    console.log("ScaleId: " + scaleId);
                    console.log(tick.StateName);
                    console.log(tick.ElapsedTime);

                    var scale = ko.utils.arrayFirst(self.coffeeScales(), function(item) {
                        return item.scaleId == scaleId;
                    });
                    
                    if (!scale) {
                        scale = new CoffeeScaleViewModel(options, scaleId);                        
                        self.coffeeScales.push(scale);                        
                    }
                    
                    scale.state(tick.StateName);
                    scale.states[tick.StateName].init(tick);
                };

                $.connection.hub.start()
                    .done(function () { console.log('Now connected, connection ID=' + $.connection.hub.id); })
                    .fail(function () { console.log('Could not Connect!'); });
            }          

            var options = {};
            ko.applyBindings(new CoffeeScalesViewModel(options));
        });
    </script>
}